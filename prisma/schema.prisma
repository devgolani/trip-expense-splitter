generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  trips    Trip[]
  otpCodes OtpCode[]
  passwordResetTokens PasswordResetToken[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OtpCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  type      OtpType
  userId    String?
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_codes")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  userId    String
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

enum OtpType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model Trip {
  id          String    @id @default(cuid())
  name        String
  location    String?
  startDate   DateTime?
  endDate     DateTime?
  archived    Boolean   @default(false)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  members     Member[]
  expenses    Expense[]
  transfers   Transfer[]

  @@map("trips")
}

model Member {
  id        String   @id @default(cuid())
  name      String
  tripId    String
  createdAt DateTime @default(now())

  trip            Trip            @relation(fields: [tripId], references: [id], onDelete: Cascade)
  paidExpenses    Expense[]       @relation("ExpensePayer")
  expenseSplits   ExpenseSplit[]
  transfersFrom   Transfer[]      @relation("TransferFrom")
  transfersTo     Transfer[]      @relation("TransferTo")

  @@unique([tripId, name])
  @@map("members")
}

model Expense {
  id          String    @id @default(cuid())
  description String
  amount      Decimal   @db.Decimal(10, 2)
  date        DateTime  @default(now())
  tripId      String
  payerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  trip         Trip           @relation(fields: [tripId], references: [id], onDelete: Cascade)
  payer        Member         @relation("ExpensePayer", fields: [payerId], references: [id], onDelete: Cascade)
  expenseSplits ExpenseSplit[]

  @@map("expenses")
}

model ExpenseSplit {
  id        String   @id @default(cuid())
  expenseId String
  memberId  String
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  member  Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([expenseId, memberId])
  @@map("expense_splits")
}

model Transfer {
  id          String   @id @default(cuid())
  tripId      String
  fromId      String
  toId        String
  amount      Decimal  @db.Decimal(10, 2)
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  trip Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  from Member @relation("TransferFrom", fields: [fromId], references: [id], onDelete: Cascade)
  to   Member @relation("TransferTo", fields: [toId], references: [id], onDelete: Cascade)

  @@map("transfers")
}
